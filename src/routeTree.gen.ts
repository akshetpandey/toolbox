/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VideosRouteImport } from './routes/videos'
import { Route as UtilitiesRouteImport } from './routes/utilities'
import { Route as OfficeDocumentsRouteImport } from './routes/office-documents'
import { Route as ImagesRouteImport } from './routes/images'
import { Route as DocumentsRouteImport } from './routes/documents'
import { Route as ArchivesRouteImport } from './routes/archives'
import { Route as IndexRouteImport } from './routes/index'

const VideosRoute = VideosRouteImport.update({
  id: '/videos',
  path: '/videos',
  getParentRoute: () => rootRouteImport,
} as any)
const UtilitiesRoute = UtilitiesRouteImport.update({
  id: '/utilities',
  path: '/utilities',
  getParentRoute: () => rootRouteImport,
} as any)
const OfficeDocumentsRoute = OfficeDocumentsRouteImport.update({
  id: '/office-documents',
  path: '/office-documents',
  getParentRoute: () => rootRouteImport,
} as any)
const ImagesRoute = ImagesRouteImport.update({
  id: '/images',
  path: '/images',
  getParentRoute: () => rootRouteImport,
} as any)
const DocumentsRoute = DocumentsRouteImport.update({
  id: '/documents',
  path: '/documents',
  getParentRoute: () => rootRouteImport,
} as any)
const ArchivesRoute = ArchivesRouteImport.update({
  id: '/archives',
  path: '/archives',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/archives': typeof ArchivesRoute
  '/documents': typeof DocumentsRoute
  '/images': typeof ImagesRoute
  '/office-documents': typeof OfficeDocumentsRoute
  '/utilities': typeof UtilitiesRoute
  '/videos': typeof VideosRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/archives': typeof ArchivesRoute
  '/documents': typeof DocumentsRoute
  '/images': typeof ImagesRoute
  '/office-documents': typeof OfficeDocumentsRoute
  '/utilities': typeof UtilitiesRoute
  '/videos': typeof VideosRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/archives': typeof ArchivesRoute
  '/documents': typeof DocumentsRoute
  '/images': typeof ImagesRoute
  '/office-documents': typeof OfficeDocumentsRoute
  '/utilities': typeof UtilitiesRoute
  '/videos': typeof VideosRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/archives'
    | '/documents'
    | '/images'
    | '/office-documents'
    | '/utilities'
    | '/videos'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/archives'
    | '/documents'
    | '/images'
    | '/office-documents'
    | '/utilities'
    | '/videos'
  id:
    | '__root__'
    | '/'
    | '/archives'
    | '/documents'
    | '/images'
    | '/office-documents'
    | '/utilities'
    | '/videos'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ArchivesRoute: typeof ArchivesRoute
  DocumentsRoute: typeof DocumentsRoute
  ImagesRoute: typeof ImagesRoute
  OfficeDocumentsRoute: typeof OfficeDocumentsRoute
  UtilitiesRoute: typeof UtilitiesRoute
  VideosRoute: typeof VideosRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/videos': {
      id: '/videos'
      path: '/videos'
      fullPath: '/videos'
      preLoaderRoute: typeof VideosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/utilities': {
      id: '/utilities'
      path: '/utilities'
      fullPath: '/utilities'
      preLoaderRoute: typeof UtilitiesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/office-documents': {
      id: '/office-documents'
      path: '/office-documents'
      fullPath: '/office-documents'
      preLoaderRoute: typeof OfficeDocumentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/images': {
      id: '/images'
      path: '/images'
      fullPath: '/images'
      preLoaderRoute: typeof ImagesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/documents': {
      id: '/documents'
      path: '/documents'
      fullPath: '/documents'
      preLoaderRoute: typeof DocumentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/archives': {
      id: '/archives'
      path: '/archives'
      fullPath: '/archives'
      preLoaderRoute: typeof ArchivesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ArchivesRoute: ArchivesRoute,
  DocumentsRoute: DocumentsRoute,
  ImagesRoute: ImagesRoute,
  OfficeDocumentsRoute: OfficeDocumentsRoute,
  UtilitiesRoute: UtilitiesRoute,
  VideosRoute: VideosRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
